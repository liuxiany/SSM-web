<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.ssm.demo</groupId>
  <artifactId>SSM-web</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>SSM-web Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  <properties>
  	<!-- spring相关版本号 -->
  	<spring.version>4.3.14.RELEASE</spring.version>
  	<mysql.connector.version>8.0.11</mysql.connector.version>
  	<mybatis.version>3.4.5</mybatis.version>
  	<servlet.version>3.1.0</servlet.version>
    <logback.version>1.2.3</logback.version>
    <slf4j.version>1.7.25</slf4j.version>
    <jstl.version>1.2</jstl.version>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- spring 相关 -->
    
    <!-- spring core -->
    <!-- spring框架的基础，核心 -->
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-core</artifactId>
	    <version>${spring.version}</version>
	    <!-- 去除默认的commons-logging -->
	    <exclusions>
	    	<exclusion>
	    		<groupId>commons-logging</groupId>  
                <artifactId>commons-logging</artifactId>  
	    	</exclusion>
	    </exclusions>
	</dependency>
	
	<!-- 使用logback替换掉 commons-logging -->
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>jcl-over-slf4j</artifactId>
	    <version>${slf4j.version}</version>
	</dependency>
	
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-api</artifactId>
	    <version>${slf4j.version}</version>
	</dependency>

	  <!--slf4j-api包 是日志的接口，log4j,logback等等才是日志的真正实现。
			slf4j-simple包 是slf4j提供的一个简单实现 -->
	 <!--<dependency>
		  <groupId>org.slf4j</groupId>
		  <artifactId>slf4j-simple</artifactId>
		  <version>${slf4j.version}</version>
		  &lt;!&ndash;<scope>test</scope>&ndash;&gt;
	  </dependency>-->

	  <dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-core</artifactId>
	    <version>${logback.version}</version>
	</dependency>
		
	<dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-classic</artifactId>
	    <version>${logback.version}</version>
	   <!-- <scope>test</scope>-->
	</dependency>

	  <dependency>
		  <groupId>ch.qos.logback</groupId>
		  <artifactId>logback-access</artifactId>
		  <version>${logback.version}</version>
	  </dependency>

      <!--用于加载自定义位置的logback.xml.默认加载的是classpath下的位置-->
	  <dependency>
		  <groupId>org.logback-extensions</groupId>
		  <artifactId>logback-ext-spring</artifactId>
		  <version>0.1.5</version>
	  </dependency>


	<!-- spring beans -->
	<!-- 访问配置文件、创建和管理bean以及进行（IoC/DI）操作相关的所有类  -->
	<!-- 依赖于 spring-core -->
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-beans</artifactId>
	    <version>${spring.version}</version>
	</dependency>
	    
	<!-- spring aop -->
	<!-- 包含使用aop所需要的类 -->
	<!-- 依赖于 spring-core和spring-beans -->
	 <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-aop</artifactId>
	    <version>${spring.version}</version>
	</dependency>
	
	<!-- aop依赖于 -->
	 <!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects -->
	 <!-- 依赖于aspectjweaver -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-aspects</artifactId>
	    <version>${spring.version}</version>
	</dependency>
	 
	 <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjweaver</artifactId>
	    <version>1.8.9</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjrt</artifactId>
	    <version>1.8.9</version>
	</dependency>
		
	<!-- https://mvnrepository.com/artifact/aopalliance/aopalliance -->
	<dependency>
	    <groupId>aopalliance</groupId>
	    <artifactId>aopalliance</artifactId>
	    <version>1.0</version>
	</dependency>
	<!-- aop依赖结束 -->
		 
	 
	 <!-- spring expression -->
	 <!-- SpEL (Spring Expression Language)，SpEL使用#{…}作为定界符，所有在大框号中的字符都将被认为是SpEL -->
	 <!-- 依赖于spring-core -->
	 <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-expression</artifactId>
	    <version>${spring.version}</version>
	</dependency>

	<!-- spring context -->
	<!-- 扩展spring core。可以找到使用Spring ApplicationContext特性时所需的全部类，
	JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如Velocity、FreeMarker、JasperReports集成的类，
	以及校验Validation方面的相关类 -->
	<!-- 依赖于 sping core,beans,aop,expression -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>${spring.version}</version>
	</dependency>

	  <!-- 含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），
            任务计划Scheduling（uartz）方面的类。外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker,
            JasperReports, BSH, Groovy, JRuby, Quartz, EHCache)-->
	  <dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-context-support</artifactId>
		  <version>${spring.version}</version>
	  </dependency>


	  <!-- spring web -->
	<!-- 包含Web应用开发时，用到Spring框架时所需的核心类，
	包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 -->
	<!-- 依赖于spring core,beans,aop,context -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-web</artifactId>
	    <version>${spring.version}</version>
	</dependency>
	
    <!-- spring mvc -->
    <!-- 包含Spring MVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类 -->
    <!-- 依赖于 spring core,beans,aop,context,expression, web -->
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-webmvc</artifactId>
	    <version>${spring.version}</version>
	</dependency>
	
	<!-- spring tx -->
	<!-- 事务相关 -->
	<!-- 依赖于spring core,beans -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-tx</artifactId>
	    <version>${spring.version}</version>
	</dependency>
		
	<!-- spring jdbc -->
	<!-- 对jdbc的简单封装 -->
	<!-- 依赖于spring core,beans,tx -->
    <dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>${spring.version}</version>
	</dependency>

	  <!--spring-test-->
	  <dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-test</artifactId>
		  <version>${spring.version}</version>
	  </dependency>

    <!-- mysql -->
    <!-- 连接mysql -->
    <dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>${mysql.connector.version}</version>
	</dependency>
	    
	 <!-- 连接池 -->
	 <dependency>
	    <groupId>com.alibaba</groupId>
	    <artifactId>druid</artifactId>
	    <version>1.1.7</version>
	</dependency>
	 
	<!-- mybatis -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>${mybatis.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.1</version>
	</dependency>
	 
    <!-- servlet -->
    <!--tomcat中也有servlet-api包，包冲突.
    解决方法：添加<scope>provided</scope>，provided表明该包只在编译和测试的时候用.
    所以，当启动tomcat的时候，就不会冲突了，-->
    <dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>javax.servlet-api</artifactId>
	    <version>${servlet.version}</version>
	    <scope>provided</scope>
	</dependency>

	  <dependency>
		  <groupId>javax.servlet.jsp</groupId>
		  <artifactId>javax.servlet.jsp-api</artifactId>
		  <version>2.3.1</version>
		  <scope>provided</scope>
	  </dependency>


	  <!--jstl-->
	  <!-- jstl -->
	  <!--<dependency>
		  <groupId>javax.servlet.jsp.jstl</groupId>
		  <artifactId>jstl</artifactId>
		  <version>${jstl.version}</version>
	  </dependency>-->

	  <!--This artifact was moved to:javax.servlet.jsp.jstl » jstl-->
	  <dependency>
		  <groupId>javax.servlet</groupId>
		  <artifactId>jstl</artifactId>
		  <version>${jstl.version}</version>
	  </dependency>

	  <!-- jstl-api -->
	  <dependency>
		  <groupId>javax.servlet.jsp.jstl</groupId>
		  <artifactId>jstl-api</artifactId>
		  <version>${jstl.version}</version>
		  <exclusions>

			  <exclusion>
				  <groupId>javax.servlet.jsp</groupId>
				  <artifactId>javax.servlet.jsp-api</artifactId>
			  </exclusion>
			  <exclusion>
				  <groupId>javax.servlet</groupId>
				  <artifactId>javax.servlet-api</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>
	  <!-- jstl-impl -->
	  <dependency>
		  <groupId>org.glassfish.web</groupId>
		  <artifactId>jstl-impl</artifactId>
		  <version>${jstl.version}</version>
	  </dependency>

	<!--freemaker-->
	  <dependency>
		  <groupId>org.freemarker</groupId>
		  <artifactId>freemarker</artifactId>
		  <version>2.3.28</version>
	  </dependency>

	  <!--fastjson-->
	  <dependency>
		  <groupId>com.alibaba</groupId>
		  <artifactId>fastjson</artifactId>
		  <version>1.2.47</version>
	  </dependency>


  </dependencies>
  <build>
    <finalName>web-admin</finalName>
    <plugins>
		<!-- compiler插件, 设定JDK版本 -->
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.1</version>
			<configuration>
				<source>1.8</source> <!-- 源代码使用的开发版本 -->
				<target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
				<encoding>UTF-8</encoding>  <!-- 编译时的字符编码 -->  
				<showWarnings>true</showWarnings>
			</configuration>
		</plugin>
	</plugins>
  </build>
</project>
